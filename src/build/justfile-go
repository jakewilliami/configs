# -*- mode: just -*-

# Define project directory
output_dir := "bin"
project_dir := justfile_dir()

# Define binary name using current directory name
bin_name := file_stem(justfile_dir())
target_bin := output_dir / bin_name

# Define Go
go := "go"
goos := env_var_or_default("GOOS", `go env GOARCH`)
goarch := env_var_or_default("GOARCH", `go env GOARCH`)
go_test := go + " test " + env_var_or_default("GO_FLAGS", "-race")
go_build := go + " build " + env_var_or_default("GO_FLAGS", "")

# Generate data
generate:
    # TODO: does this work?
    go generate

# Build the project and write the resulting binary to the "bin/" directory
build: build-core
    mkdir -p {{output_dir}}
    cp -f {{target_bin}} {{project_dir}}

# Core build command
[private]
build-core:
    {{go_build}} -o {{target_bin}} .

# Run `go fmt` and `go vet`
fmt: vet
    # TODO: does this work?
    go fmt ./...

[private]
vet:
    go vet ./...

# Update project dependencies
update:
    # TODO: does this work?
    go get -u ./...
    go mod tidy

# Run tests
test:
    # TODO: does this work?
    # go test ./...
    # go test --all
    {{go_test}} ./...

# Generate documentation
doc: get-godoc
    # TODO: does this work?
    # go doc ./...
    godoc -http=:6060

[private, unix]
get-godoc:
    command -v godoc || go install golang.org/x/tools/cmd/godoc@latest
